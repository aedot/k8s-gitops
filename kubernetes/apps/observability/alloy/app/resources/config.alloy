logging {
  level    = "warn"
  format   = "json"
  write_to = [loki.write.default.receiver]
}

// Write logs to Loki
loki.write "default" {
  endpoint {
    url = "http://loki-headless.observability.svc.cluster.local:3100/loki/api/v1/push"
  }
}

// Batch logs before writing to Loki
batch "loki_batch" {
  batch_size = 100
  timeout    = "5s"
  forward_to = [loki.write.default.receiver]
}

// Kubernetes service discovery
discovery.kubernetes "pod" {
  role = "pod"
}

discovery.kubernetes "service" {
  role = "service"
}

// Relabel pod targets with useful metadata
discovery.relabel "pod_logs" {
  targets = discovery.kubernetes.pod.targets

  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    action        = "replace"
    target_label  = "namespace"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_node_name"]
    action        = "replace"
    target_label  = "node"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    action        = "replace"
    target_label  = "pod"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    action        = "replace"
    target_label  = "container"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
    action        = "replace"
    target_label  = "app"
  }

  rule {
    source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
    action        = "replace"
    target_label  = "job"
    separator     = "/"
    replacement   = "$1"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
    action        = "replace"
    target_label  = "__path__"
    separator     = "/"
    replacement   = "/var/log/pods/*$1/*.log"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_container_id"]
    action        = "replace"
    target_label  = "container_runtime"
    regex         = "^(\\S+):\\/\\/.+$"
    replacement   = "$1"
  }
}

// Kubernetes pod logs
loki.source.kubernetes "pod_logs" {
  targets    = discovery.relabel.pod_logs.output
  forward_to = [loki.process.pod_logs.receiver]
}

// Filter and enrich pod logs
loki.process "pod_logs" {
  stage.filter {
    expression = `len(.message) > 0`
  }

  stage.static_labels {
    values = {
      cluster = "main",
    }
  }

  forward_to = [batch.loki_batch.receiver]
}

// Kubernetes event logs
loki.source.kubernetes_events "cluster_events" {
  job_name   = "integrations/kubernetes/eventhandler"
  log_format = "logfmt"
  forward_to = [loki.process.cluster_events.receiver]
}

// Filter and enrich Kubernetes events
loki.process "cluster_events" {
  stage.filter {
    expression = `len(.message) > 0`
  }

  stage.static_labels {
    values = {
      cluster = "main",
    }
  }

  stage.labels {
    values = {
      kubernetes_cluster_events = "job",
    }
  }

  forward_to = [batch.loki_batch.receiver]
}
