// Log Alloy’s own logs
logging {
  level    = "warn"                           // Only log warnings and above
  format   = "json"                           // Format logs as JSON
  write_to = [loki.write.default.receiver]    // Send Alloy’s logs to Loki
}

// Kubernetes service discovery for Pods
discovery.kubernetes "pod" {
  role = "pod"                                // Discover pods as scrape/log targets
}

// Kubernetes service discovery for Services
discovery.kubernetes "service" {
  role = "service"                            // Discover services (optional, not used here)
}


// Relabel discovered Kubernetes pod targets to enrich with useful labels
discovery.relabel "pod_logs" {
  targets = discovery.kubernetes.pod.targets  // Input: discovered pod targets

  // Map Kubernetes metadata into useful log labels
  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    action        = "replace"
    target_label  = "namespace"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_node_name"]
    action        = "replace"
    target_label  = "node"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    action        = "replace"
    target_label  = "pod"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    action        = "replace"
    target_label  = "container"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
    action        = "replace"
    target_label  = "app"
  }

  rule {
    source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
    action        = "replace"
    target_label  = "job"                     // Combine namespace/container into "job" label
    separator     = "/"
    replacement   = "$1"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
    action        = "replace"
    target_label  = "__path__"                // This defines the container log file path to tail
    separator     = "/"
    replacement   = "/var/log/pods/*$1/*.log"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_container_id"]
    action        = "replace"
    target_label  = "container_runtime"
    regex         = "^(\\S+):\\/\\/.+$"       // Extracts "docker", "containerd", etc.
    replacement   = "$1"
  }
}

// Tail logs from discovered Kubernetes pods
loki.source.kubernetes "pod_logs" {
  targets    = discovery.relabel.pod_logs.output  // Take the relabeled pod targets
  forward_to = [loki.process.pod_logs.receiver]   // Send logs to the pod_logs processor
}

// Process pod logs: add labels, filter old logs, route to throttling/batching
loki.process "pod_logs" {
  stage.static_labels {
    values = {
      cluster = "main",                     // Add a "cluster=main" label to all logs
    }
  }

  stage.filter {
    expression = "time() - .timestamp < duration(\"1h\")"
    // Drop logs older than 1 hour (to prevent 400 errors from Loki)
  }

  forward_to = [rate_limit.loki_limit.receiver]
  // Send logs to the rate limiter before sending to Loki
}

// Capture Kubernetes events as log entries
loki.source.kubernetes_events "cluster_events" {
  job_name   = "integrations/kubernetes/eventhandler"
  log_format = "logfmt"                          // Format events in logfmt
  forward_to = [loki.process.cluster_events.receiver]
}

// Process Kubernetes events: add labels, then route to Loki
loki.process "cluster_events" {
  stage.static_labels {
    values = {
      cluster = "main",                          // Add cluster label
    }
  }

  stage.labels {
    values = {
      kubernetes_cluster_events = "job",         // Add a label to tag these as events
    }
  }

  forward_to = [rate_limit.loki_limit.receiver]  // Route events through rate limiter → Loki
}

// Batch logs to avoid too many small requests to Loki
batch "loki_batch" {
  forward_to         = [loki.write.default.receiver]  // After batching, send to Loki
  timeout            = "1s"                           // Flush batch every 1s
  batch_size         = 1000                           // Or after 1000 lines
  flush_on_shutdown  = true                           // Flush all logs before shutdown
}

// Throttle logs to avoid Loki 429 errors
rate_limit "loki_limit" {
  limit      = 3_000_000                         // Limit to 3 MB/s
  forward_to = [batch.loki_batch.receiver]       // Send rate-limited logs to the batcher
}

// Loki output: push logs to the Loki API endpoint
loki.write "default" {
  endpoint {
    url = "http://loki-headless.observability.svc.cluster.local:3100/loki/api/v1/push"
    // This is Loki’s write API endpoint (inside the cluster)
  }
}

