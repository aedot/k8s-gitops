---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app wger
spec:
  chartRef:
    kind: OCIRepository
    name: app-template
  interval: 30m
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    controllers:
      wger:
        annotations:
          reloader.stakater.com/auto: "true"
        pod:
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
            fsGroupChangePolicy: "OnRootMismatch"
        initContainers:
          init-db:
            image:
              repository: ghcr.io/home-operations/postgres-init
              tag: 17@sha256:e0c87ce7df39d06b93f27cf2cc6a056611f13faaa88cc07ab4dc8bf7a85d0b11
            envFrom: &envFrom
              - secretRef:
                  name: wger-secret
        containers:
          app:
            image:
              repository: wger/server
              tag: 2.4-dev@sha256:444f20aa36195a8a27ebd81c68d7c170b317c6544861acbc45131cb1dcde691d
            envFrom: *envFrom
            env:
              TZ: "America/Los_Angeles"
              SITE_URL: "https://fit.${SECRET_DOMAIN}"
              ALLOW_REGISTRATION: "True"
              ALLOW_GUEST_USERS: "False"
              WGER_INSTANCE: https://wger.de
              ALLOW_UPLOAD_VIDEOS: "True"
              MIN_ACCOUNT_AGE_TO_TRUST: "1"     # default is 21 day
              SYNC_EXERCISES_ON_STARTUP: "True"
              SYNC_EXERCISES_CELERY: "True"
              SYNC_EXERCISE_IMAGES_CELERY: "True"
              SYNC_EXERCISE_VIDEOS_CELERY: "True"
              DOWNLOAD_INGREDIENTS_FROM: "WGER"
              USE_CELERY: "True"
              CELERY_BROKER: &redis "redis://dragonfly.dbms.svc.cluster.local:6379"
              CELERY_BACKEND: *redis

              DJANGO_DB_ENGINE: "django.db.backends.postgresql"
              DJANGO_CACHE_BACKEND: "django_redis.cache.RedisCache"
              DJANGO_CACHE_LOCATION: "redis://dragonfly.dbms.svc.cluster.local:6379"
              DJANGO_CACHE_TIMEOUT: "1296000"
              DJANGO_CACHE_CLIENT_CLASS: "django_redis.client.DefaultClient"
              DJANGO_CLEAR_STATIC_FIRST: "False"
              DJANGO_DEBUG: "True"
              DJANGO_PERFORM_MIGRATIONS: "True"
              DJANGO_COLLECTSTATIC: "True"

              CSRF_TRUSTED_ORIGINS: "https://fit.${SECRET_DOMAIN}"
              X_FORWARDED_PROTO_HEADER_SET: "True"
              MEDIA_URL: "https://fit.${SECRET_DOMAIN}/media/"
              STATIC_URL: "https://fit.${SECRET_DOMAIN}/static/"

              AXES_ENABLED: "True"
              AXES_FAILURE_LIMIT: "10"
              AXES_COOLOFF_TIME: "30"
              AXES_HANDLER: "axes.handlers.cache.AxesCacheHandler"
              AXES_LOCKOUT_PARAMETERS: "ip_address"
              AXES_IPWARE_PROXY_COUNT: "1"
              AXES_IPWARE_META_PRECEDENCE_ORDER: "HTTP_X_FORWARDED_FOR,REMOTE_ADDR"

              WGER_USE_GUNICORN: "True"
              EXERCISE_CACHE_TTL: "18000"
              ACCESS_TOKEN_LIFETIME: "10"
              REFRESH_TOKEN_LIFETIME: "24"
              USE_RECAPTCHA: "False"
              NUMBER_OF_PROXIES: "1"
              GUNICORN_CMD_ARGS: "--workers 3 --threads 2 --worker-class gthread --proxy-protocol True --timeout 240"
            resources:
              requests:
                cpu: 15m
                memory: 80M
              limits:
                memory: 4096M

#TODO: fix celery after static images
      nginx:
        annotations:
          reloader.stakater.com/auto: "true"
        pod:
          securityContext:
            runAsUser: 0  # run as root to allow temp dir creation
            runAsGroup: 0
            fsGroup: 0
            fsGroupChangePolicy: "OnRootMismatch"
        containers:
          app:
            image:
              repository: nginx
              tag: stable@sha256:e2d0edf0e20951a190fe2322e27c6d790c675e9ff0018ba493947972f816f567
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 512Mi

    service:
      app:
        controller: *app
        ports:
          http:
            port: "8000"
      nginx:
        controller: nginx
        ports:
          http:
            port: &port "80"
    route:
      app:
        hostnames: ["fit.${SECRET_DOMAIN}"]
        parentRefs:
          - name: internal
            namespace: kube-system
            sectionName: https
        rules:
          - backendRefs:
              - name: nginx
                port: *port
    persistence:
      app:
        existingClaim: *app
        globalMounts:
          - path: /home/wger/static
            subPath: static
          - path: /home/wger/media
            subPath: media

      nginx:
        enabled: true
        type: configMap
        name: nginx-config
        globalMounts:
          - path: /etc/nginx/conf.d
          - path: /wger/static
            subPath: static
          - path: /wger/media
            subPath: media
